// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

// Nota: Mantive o PostgreSQL, que é mais robusto para produção.
// Se quiser usar SQLite, troque o bloco datasource por:
// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum Role {
  PACIENTE
  DENTISTA
  ADMIN
}

enum AppointmentStatus {
  AGENDADO
  CONCLUIDO
  CANCELADO
  NAO_COMPARECEU
}

enum ServiceCategory {
  DIAGNOSTICO_E_PREVENCAO
  RESTAURACAO_E_ENDODONTIA
  ESTETICA
  ORTODONTIA
  CIRURGIA
  IMPLANTODONTIA
  PROTESE_DENTARIA
  PERIODONTIA
  ODONTOPEDIATRIA
}

// --- Modelo User Unificado ---
// Este modelo agora contém os campos da sua aplicação E os campos para o NextAuth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(PACIENTE) // Campo da lógica da clínica
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relações do NextAuth
  accounts Account[]
  sessions Session[]

  // Relações da lógica da clínica
  patientProfile         PatientProfile?
  dentistProfile         DentistProfile?
  appointmentsAsPatient  Appointment[]    @relation("PatientAppointments")
  appointmentsAsDentist  Appointment[]    @relation("DentistAppointments")
  dentistServices        DentistService[]
}


// --- Modelos da Clínica (Inalterados) ---
model PatientProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DentistProfile {
  id              String  @id @default(cuid())
  userId          String  @unique
  croNumber       String  @unique
  specialization  String
  bio             String? @db.Text
  profileImageUrl String?
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Clinic {
  id      String @id @default(cuid())
  name    String
  address String
  phones  String
  cnpj    String @unique
}

model Service {
  id            String          @id @default(cuid())
  name          String
  description   String
  price         Decimal         @db.Decimal(10, 2)
  duration      Int
  category      ServiceCategory
  imageUrl      String?
  professionals DentistService[]
  appointments  Appointment[]
}

model DentistService {
  dentistId String
  serviceId String
  dentist   User    @relation(fields: [dentistId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([dentistId, serviceId])
}

model Appointment {
  id        String            @id @default(cuid())
  date      DateTime
  status    AppointmentStatus @default(AGENDADO)
  notes     String?
  patientId String
  dentistId String
  serviceId String
  patient   User              @relation("PatientAppointments", fields: [patientId], references: [id])
  dentist   User              @relation("DentistAppointments", fields: [dentistId], references: [id])
  service   Service           @relation(fields: [serviceId], references: [id])
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}


// --- Modelos Padrão do NextAuth ---
// Adicionados para compatibilidade total com @auth/prisma-adapter
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}